/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tc.assessment;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;

/**
 *
 * @author thinhnt
 */
public class PRGraph extends javax.swing.JPanel {

    private int WIDTH_GRAPH = 500;
    private int HEIGHT_GRAPH = 500;
    private int xLocation = 0;
    private int yLocation = 0;
    private double MAX_VALUE = 1.0;

    private int widthParent;
    private int heightParent;

    private Point2D[] verticalPoints;
    private Point2D[] verticalPoints2;
    private Point2D[] verticalLabelCoordinate;

    private Point2D[] horizontalPoints;
    private Point2D[] horizontalPoints2;
    private Point2D[] horizontalLabelCoordinate;

    private int pointsPerAxis = 6;

    private String[] labels;
    private String verticalAxisName;
    private String horizontalAxisName;
    private Point2D verticalAxisNameCoorditane;
    private Point2D horizontalAxisNameCoorditane;

    private Point2D[] cuvesPoints;

    /**
     * Creates new form Graph
     * @param width
     * @param height
     */
    public PRGraph(int width, int height) {
        this.widthParent = width;
        this.heightParent = height;
        initComponents();
        initPoints();
        xLocation = (widthParent - WIDTH_GRAPH) / 2;
        yLocation = (heightParent - 80 - HEIGHT_GRAPH) / 2;
        labels = new String[]{"0", "0.2", "0.4", "0.6", "0.8", "1.0"};
        verticalAxisName = "Precision";
        horizontalAxisName = "Recall";
    }

    private void initPoints() {
        verticalPoints = new Point2D[pointsPerAxis];
        verticalPoints2 = new Point2D[pointsPerAxis];
        verticalLabelCoordinate = new Point2D[pointsPerAxis];

        horizontalPoints = new Point2D[pointsPerAxis];
        horizontalPoints2 = new Point2D[pointsPerAxis];
        horizontalLabelCoordinate = new Point2D[pointsPerAxis];

        for (int i = 0; i < pointsPerAxis; i++) {
            verticalPoints[i] = new Point2D.Double(0, i * MAX_VALUE / (pointsPerAxis - 1));
            verticalPoints2[i] = new Point2D.Double(0.01, i * MAX_VALUE / (pointsPerAxis - 1));
            verticalLabelCoordinate[i] = new Point2D.Double(-0.05, i * MAX_VALUE / (pointsPerAxis - 1) - 0.01);

            horizontalPoints[i] = new Point2D.Double(i * MAX_VALUE / (pointsPerAxis - 1), 0);
            horizontalPoints2[i] = new Point2D.Double(i * MAX_VALUE / (pointsPerAxis - 1), 0.01);
            horizontalLabelCoordinate[i] = new Point2D.Double(i * MAX_VALUE / (pointsPerAxis - 1) - 0.01, -0.05);
        }

        verticalAxisNameCoorditane = new Point2D.Double(-0.15, (MAX_VALUE - 0.075) / 2);
        horizontalAxisNameCoorditane = new Point2D.Double((MAX_VALUE - 0.075) / 2, -0.07);

    }

    private Point2D convert2OriginPoint(Point2D graphPoint) {
        double x = graphPoint.getX();
        double y = graphPoint.getY();
        double xOrg = x * WIDTH_GRAPH / MAX_VALUE + xLocation;
        double yOrg = yLocation + HEIGHT_GRAPH - y * HEIGHT_GRAPH / MAX_VALUE;
        return new Point2D.Double(xOrg, yOrg);
    }

    private void drawGraphLine(Graphics2D g2, Point2D startGraphPoint2D, Point2D endGraphPoint2D) {
        Point2D startPoint = convert2OriginPoint(startGraphPoint2D);
        Point2D endPoint = convert2OriginPoint(endGraphPoint2D);
        g2.draw(new Line2D.Double(startPoint, endPoint));
    }

    private void drawGraphString(Graphics2D g2, String str, Point2D coordinate) {
        Point2D org = convert2OriginPoint(coordinate);
        float x = (float) org.getX();
        float y = (float) org.getY();
        g2.drawString(str, x, y);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void paint(Graphics g) {
        super.paint(g); //To change body of generated methods, choose Tools | Templates.
        Graphics2D g2 = (Graphics2D) g;
        drawAxis(g2);
        g2.setColor(Color.RED);
        drawCuves(g2);
        g2.setColor(Color.BLACK);
    }

    private void drawAxis(Graphics2D g2) {
        drawGraphLine(g2, verticalPoints[0], verticalPoints[verticalPoints.length - 1]);
        drawGraphLine(g2, horizontalPoints[0], horizontalPoints[verticalPoints.length - 1]);
        for (int i = 0; i < pointsPerAxis; i++) {
            drawGraphLine(g2, verticalPoints[i], verticalPoints2[i]);
            drawGraphLine(g2, horizontalPoints[i], horizontalPoints2[i]);
            drawGraphString(g2, labels[i], verticalLabelCoordinate[i]);
            drawGraphString(g2, labels[i], horizontalLabelCoordinate[i]);
        }
        g2.setColor(Color.red);
        g2.setFont(new Font(null, Font.PLAIN, 15));
        drawGraphString(g2, horizontalAxisName, horizontalAxisNameCoorditane);
        drawGraphString(g2, verticalAxisName, verticalAxisNameCoorditane);
        g2.setColor(Color.black);
    }

    private void drawCuves(Graphics2D g2) {
        for (int i = 0; i < cuvesPoints.length - 1; i++) {
            drawGraphLine(g2, cuvesPoints[i], cuvesPoints[i + 1]);
        }
    }

    public void setWidthParent(int widthParent) {
        this.widthParent = widthParent;
    }

    public void setHeightParent(int heightParent) {
        this.heightParent = heightParent;
    }

    public void setCuvesPoints(Point2D[] cuvesPoints) {
        this.cuvesPoints = cuvesPoints;
    }
    
}
