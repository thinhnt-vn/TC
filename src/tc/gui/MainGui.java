/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tc.gui;

import java.awt.geom.Point2D;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.StringReader;
import java.util.List;
import java.util.function.Predicate;
import java.util.logging.Level;
import java.util.logging.Logger;
import static java.util.stream.IntStream.builder;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileFilter;
import tc.assessment.AssessmentGraph;
import tc.assessment.AssessmentResult;
import tc.assessment.CrossValidateAssessor;
import tc.assessment.PRGraph;
import tc.constances.TCConstances;
import tc.data.Analyzer;
import tc.data.DataSet;
import tc.data.DataSetBuilder;
import tc.data.DataSetMetaData;
import tc.data.Document;
import tc.data.DocumentLoader;
import tc.data.TCAnalyzer;
import tc.data.TokenStream;
import tc.data.URLParser;
import tc.data.Utils;
import tc.training.NeuralNetworkModel;
import tc.training.NeuralNetworkTrainer;
import tc.training.PredictResult;
import tc.training.TrainingModel;

/**
 *
 * @author thinhnt
 */
public class MainGui extends javax.swing.JFrame {

    private TrainingModel model;
    private URLParser vnExpParser;
    private URLParser thanhnienParser;
    private URLParser twentyfourParser;
    private URLParser tuoitreParser;
    private final static String MODEL_LABEL = "Model:";

    /**
     * Creates new form MainGui
     */
    public MainGui() {
        initComponents();
        initParsers();
        setLocationRelativeTo(null);
    }
    
    private void initParsers(){
        vnExpParser = new URLParser();
        vnExpParser.addSelector("#left_calculator");
        vnExpParser.addSelector(".fck_detail.width_common");
        vnExpParser.addSelector(".fck_detail.width_common.block_ads_connect");
        vnExpParser.addSelector(".main_content_detail.width_common");

        thanhnienParser = new URLParser();
        thanhnienParser.addSelector(".content");
        thanhnienParser.addSelector(".details-content.article-content");

        twentyfourParser = new URLParser();
        twentyfourParser.addSelector(".text-conent");
        
        tuoitreParser = new URLParser();
        tuoitreParser.addSelector(".fck");
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        modelLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        inputTextPanel = new javax.swing.JTextPane();
        classifyButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        importItem = new javax.swing.JMenuItem();
        exportItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        trainItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        exitItem = new javax.swing.JMenuItem();
        appMenu = new javax.swing.JMenu();
        assessmentItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Website Classification");
        setMinimumSize(new java.awt.Dimension(800, 600));
        setPreferredSize(new java.awt.Dimension(800, 600));

        jPanel2.setLayout(new java.awt.BorderLayout());

        modelLabel.setText("Model:");
        modelLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
        jPanel2.add(modelLabel, java.awt.BorderLayout.PAGE_START);

        inputTextPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
        jScrollPane1.setViewportView(inputTextPanel);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        classifyButton.setText("Classify");
        classifyButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
        classifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classifyButtonActionPerformed(evt);
            }
        });
        jPanel2.add(classifyButton, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");

        importItem.setText("Import Model");
        importItem.setIcon(Icon.createImageIcon(Icon.IMPORT_ICON_PATH, "Import a model"));
        importItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importItemActionPerformed(evt);
            }
        });
        fileMenu.add(importItem);

        exportItem.setText("Export Model");
        exportItem.setIcon(Icon.createImageIcon(Icon.EXPORT_ICON_PATH, "Export the model to a file"));
        exportItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportItemActionPerformed(evt);
            }
        });
        fileMenu.add(exportItem);
        fileMenu.add(jSeparator1);

        trainItem.setText("Train");
        trainItem.setIcon(Icon.createImageIcon(Icon.TRAIN_ICON_PATH, "Training a date set"));
        trainItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainItemActionPerformed(evt);
            }
        });
        fileMenu.add(trainItem);
        fileMenu.add(jSeparator2);

        exitItem.setText("Exit");
        exitItem.setIcon(Icon.createImageIcon(Icon.EXIT_ICON_PATH, "Exit"));
        exitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitItem);

        menuBar.add(fileMenu);

        appMenu.setText("App");

        assessmentItem.setText("Assessment");
        assessmentItem.setIcon(Icon.createImageIcon(Icon.ASSESSMENT_ICON_PATH, "Assessment the application"));
        assessmentItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assessmentItemActionPerformed(evt);
            }
        });
        appMenu.add(assessmentItem);

        menuBar.add(appMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitItemActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitItemActionPerformed

    private void classifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classifyButtonActionPerformed
        if (model == null) {
            JOptionPane.showMessageDialog(this, "Please train or load a new neural "
                    + "network model", "Message", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        String text = inputTextPanel.getText();
        if (text.matches(TCConstances.URL_REG)) {
            try {
                if (text.contains("24h.com.vn")) {
                    text = twentyfourParser.parse(text);
                } else if (text.contains("thanhnien.vn")) {
                    text = thanhnienParser.parse(text);
                } else if (text.contains("vnexpress.net")) {
                    text = vnExpParser.parse(text);
                }else if (text.contains("tuoitre.vn")) {
                    text = tuoitreParser.parse(text);
                }
            } catch (IOException ex) {
                Logger.getLogger(MainGui.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        System.out.println(text);
        Document doc = new Document(null, new BufferedReader(new StringReader(text)));
        Analyzer analyzer = new TCAnalyzer();
        TokenStream ts = analyzer.tokenStream(doc.getReader());
        String token = null;
        while ((token = ts.increaseToken()) != null) {
            doc.addToken(token);
        }

        DataSetMetaData metaData = ((NeuralNetworkModel) model).getMetaData();
        Utils.tfidf4Doc(doc, metaData.getTotalDoc(), metaData.getDocCount(), metaData.getFeatureWords());

        PredictResult rs = model.predict(doc);
        JOptionPane.showMessageDialog(this, rs.getDesciption(), "Result", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_classifyButtonActionPerformed

    private void importItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importItemActionPerformed
        JFileChooser chooser = new JFileChooser(new File(TCConstances.Path.MODEL_PATH));
        chooser.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                }
                String ext = Utils.getFileExt(f.getName());
                return TCConstances.File.MODEL_FILE_EXTENSION.equals(ext);
            }

            @Override
            public String getDescription() {
                return "Accept tc model file (*.tcmodel)";
            }
        });
        int click = chooser.showOpenDialog(this);
        if (click == JFileChooser.APPROVE_OPTION) {
            ObjectInputStream stream = null;
            try {
                stream = new ObjectInputStream(new FileInputStream(chooser.getSelectedFile()));
                model = (TrainingModel) stream.readObject();
                stream.close();
                modelLabel.setText(MODEL_LABEL + model.getDescription());
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(MainGui.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                if (stream != null) {
                    try {
                        stream.close();
                    } catch (IOException ex) {
                        Logger.getLogger(MainGui.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_importItemActionPerformed

    private void exportItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportItemActionPerformed
        if (model == null) {
            JOptionPane.showMessageDialog(this, "Please train a new neural network model",
                    "Message", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        JFileChooser chooser = new JFileChooser(new File(TCConstances.Path.MODEL_PATH));
        chooser.setSelectedFile(new File(model.getDescription() + "."
                + TCConstances.File.MODEL_FILE_EXTENSION));
        int click = chooser.showSaveDialog(this);
        if (click == JFileChooser.APPROVE_OPTION) {
            String fileName = chooser.getSelectedFile().getName();
            if (!fileName.endsWith("." + TCConstances.File.MODEL_FILE_EXTENSION)) {
                fileName = fileName + "." + TCConstances.File.MODEL_FILE_EXTENSION;
            }

            String path = TCConstances.Path.MODEL_PATH + "/" + fileName;

            ObjectOutputStream stream = null;
            try {
                stream = new ObjectOutputStream(new FileOutputStream(path));
                stream.writeObject(model);
                stream.close();
            } catch (IOException ex) {
                Logger.getLogger(MainGui.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                if (stream != null) {
                    try {
                        stream.close();
                    } catch (IOException ex) {
                        Logger.getLogger(MainGui.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_exportItemActionPerformed

    private void trainItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainItemActionPerformed
        JFileChooser chooser = new JFileChooser(new File(TCConstances.Path.DATA_PATH));
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int click = chooser.showOpenDialog(this);
        if (click == JFileChooser.APPROVE_OPTION) {
            trainItem.setEnabled(false);
            ProgressFrame.instance().showProgressBar();
            new TCWorker() {

                @Override
                protected void doTask() {
                    File dataDir = chooser.getSelectedFile();
                    DataSetBuilder builder = new DataSetBuilder(dataDir.getAbsolutePath(), (File t) -> {
                        String name1 = t.getName();
                        return name1.endsWith(".tt") || name1.endsWith(".kt") || name1.endsWith(".pl")
                                || name1.endsWith(".cn");
                    });
                    builder.build();

                    DataSet data = new DataSet();
                    data.addAll(builder.getDataSets()[0]);
                    data.addAll(builder.getDataSets()[1]);
                    data.addAll(builder.getDataSets()[2]);
                    data.addAll(builder.getDataSets()[3]);
                    data.addAll(builder.getDataSets()[4]);

                    data.setMetaData(new DataSetMetaData(builder.getFeatureWords(), data.size(),
                            DocumentLoader.docCount));

                    NeuralNetworkTrainer trainer = new NeuralNetworkTrainer(1457);
                    model = trainer.train(data);
                    model.setDescription(Utils.getTime());
                }

                @Override
                protected void process(List<String> chunks) {
                    super.process(chunks); //To change body of generated methods, choose Tools | Templates.
                    String str = chunks.get(chunks.size() - 1);
                    ProgressFrame.instance().setString(str);
                }

                @Override
                protected void done() {
                    super.done(); //To change body of generated methods, choose Tools | Templates.
                    ProgressFrame.instance().hideProgressBar();
                    modelLabel.setText(MODEL_LABEL + model.getDescription());
                    trainItem.setEnabled(true);
                }

            }.execute();

        }
    }//GEN-LAST:event_trainItemActionPerformed

    private void assessmentItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assessmentItemActionPerformed
        JFileChooser chooser = new JFileChooser(new File(TCConstances.Path.DATA_PATH));
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int click = chooser.showOpenDialog(this);
        if (click == JFileChooser.APPROVE_OPTION) {
            assessmentItem.setEnabled(false);
            ProgressFrame.instance().showProgressBar();
            new TCWorker() {
                Point2D[] points;

                @Override
                protected void doTask() {
                    File dataDir = chooser.getSelectedFile();
                    DataSetBuilder builder = new DataSetBuilder(dataDir.getAbsolutePath(), (File t) -> {
                        String name1 = t.getName();
                        return name1.endsWith(".tt") || name1.endsWith(".kt") || name1.endsWith(".pl")
                                || name1.endsWith(".cn");
                    });

                    builder.build();

                    CrossValidateAssessor assessor = new CrossValidateAssessor(
                            builder.getDataSets(), new NeuralNetworkTrainer(1200));
                    AssessmentResult result = assessor.assess();

                    double[] precision = result.getPrecision();
                    double[] recall = result.getRecall();

                    points = new Point2D[precision.length];
                    for (int i = 0; i < points.length; i++) {
                        points[i] = new Point2D.Double(recall[i], precision[i]);
                    }
                }

                @Override
                protected void process(List<String> chunks) {
                    super.process(chunks); //To change body of generated methods, choose Tools | Templates.
                    String str = chunks.get(chunks.size() - 1);
                    ProgressFrame.instance().setString(str);
                }

                @Override
                protected void done() {
                    super.done(); //To change body of generated methods, choose Tools | Templates.
                    assessmentItem.setEnabled(true);
                    ProgressFrame.instance().hideProgressBar();
                    AssessmentGraph graph = new AssessmentGraph();
                    PRGraph graphPanel = new PRGraph(graph.getWidth(), graph.getHeight());
                    graphPanel.setCuvesPoints(points);
                    graph.setContentPane(graphPanel);
                    graph.setVisible(true);
                }

            }.execute();

        }

    }//GEN-LAST:event_assessmentItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            // Set cross-platform Java L&F (also called "Metal")
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
        } catch (UnsupportedLookAndFeelException e) {
            // handle exception
        } catch (ClassNotFoundException e) {
            // handle exception
        } catch (InstantiationException e) {
            // handle exception
        } catch (IllegalAccessException e) {
            // handle exception
        }

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu appMenu;
    private javax.swing.JMenuItem assessmentItem;
    private javax.swing.JButton classifyButton;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JMenuItem exportItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem importItem;
    private javax.swing.JTextPane inputTextPanel;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel modelLabel;
    private javax.swing.JMenuItem trainItem;
    // End of variables declaration//GEN-END:variables
}
